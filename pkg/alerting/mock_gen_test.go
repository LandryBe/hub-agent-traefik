// Code generated by mocktail; DO NOT EDIT.

package alerting

import (
	"context"
	"testing"
	"time"

	"github.com/stretchr/testify/mock"
	"github.com/traefik/hub-agent-traefik/pkg/metrics"
)

// dataPointsFinderMock mock of DataPointsFinder.
type dataPointsFinderMock struct{ mock.Mock }

func newDataPointsFinderMock(tb testing.TB) *dataPointsFinderMock {
	tb.Helper()

	m := &dataPointsFinderMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *dataPointsFinderMock) FindByEdgeIngress(table string, edgeIngress string, from time.Time, to time.Time) metrics.DataPoints {
	_ret := _m.Called(table, edgeIngress, from, to)

	_ra0, _ := _ret.Get(0).(metrics.DataPoints)

	return _ra0
}

func (_m *dataPointsFinderMock) OnFindByEdgeIngress(table string, edgeIngress string, from time.Time, to time.Time) *dataPointsFinderFindByEdgeIngressCall {
	return &dataPointsFinderFindByEdgeIngressCall{Call: _m.Mock.On("FindByEdgeIngress", table, edgeIngress, from, to)}
}

func (_m *dataPointsFinderMock) OnFindByEdgeIngressRaw(table interface{}, edgeIngress interface{}, from interface{}, to interface{}) *dataPointsFinderFindByEdgeIngressCall {
	return &dataPointsFinderFindByEdgeIngressCall{Call: _m.Mock.On("FindByEdgeIngress", table, edgeIngress, from, to)}
}

type dataPointsFinderFindByEdgeIngressCall struct{ *mock.Call }

func (_c dataPointsFinderFindByEdgeIngressCall) TypedReturns(a metrics.DataPoints) *mock.Call {
	return _c.Return(a)
}

func (_m *dataPointsFinderMock) FindByIngress(table string, ingress string, from time.Time, to time.Time) metrics.DataPoints {
	_ret := _m.Called(table, ingress, from, to)

	_ra0, _ := _ret.Get(0).(metrics.DataPoints)

	return _ra0
}

func (_m *dataPointsFinderMock) OnFindByIngress(table string, ingress string, from time.Time, to time.Time) *dataPointsFinderFindByIngressCall {
	return &dataPointsFinderFindByIngressCall{Call: _m.Mock.On("FindByIngress", table, ingress, from, to)}
}

func (_m *dataPointsFinderMock) OnFindByIngressRaw(table interface{}, ingress interface{}, from interface{}, to interface{}) *dataPointsFinderFindByIngressCall {
	return &dataPointsFinderFindByIngressCall{Call: _m.Mock.On("FindByIngress", table, ingress, from, to)}
}

type dataPointsFinderFindByIngressCall struct{ *mock.Call }

func (_c dataPointsFinderFindByIngressCall) TypedReturns(a metrics.DataPoints) *mock.Call {
	return _c.Return(a)
}

func (_m *dataPointsFinderMock) FindByIngressAndService(table string, ingress string, service string, from time.Time, to time.Time) (metrics.DataPoints, error) {
	_ret := _m.Called(table, ingress, service, from, to)

	_ra0, _ := _ret.Get(0).(metrics.DataPoints)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *dataPointsFinderMock) OnFindByIngressAndService(table string, ingress string, service string, from time.Time, to time.Time) *dataPointsFinderFindByIngressAndServiceCall {
	return &dataPointsFinderFindByIngressAndServiceCall{Call: _m.Mock.On("FindByIngressAndService", table, ingress, service, from, to)}
}

func (_m *dataPointsFinderMock) OnFindByIngressAndServiceRaw(table interface{}, ingress interface{}, service interface{}, from interface{}, to interface{}) *dataPointsFinderFindByIngressAndServiceCall {
	return &dataPointsFinderFindByIngressAndServiceCall{Call: _m.Mock.On("FindByIngressAndService", table, ingress, service, from, to)}
}

type dataPointsFinderFindByIngressAndServiceCall struct{ *mock.Call }

func (_c dataPointsFinderFindByIngressAndServiceCall) TypedReturns(a metrics.DataPoints, b error) *mock.Call {
	return _c.Return(a, b)
}

func (_m *dataPointsFinderMock) FindByService(table string, service string, from time.Time, to time.Time) metrics.DataPoints {
	_ret := _m.Called(table, service, from, to)

	_ra0, _ := _ret.Get(0).(metrics.DataPoints)

	return _ra0
}

func (_m *dataPointsFinderMock) OnFindByService(table string, service string, from time.Time, to time.Time) *dataPointsFinderFindByServiceCall {
	return &dataPointsFinderFindByServiceCall{Call: _m.Mock.On("FindByService", table, service, from, to)}
}

func (_m *dataPointsFinderMock) OnFindByServiceRaw(table interface{}, service interface{}, from interface{}, to interface{}) *dataPointsFinderFindByServiceCall {
	return &dataPointsFinderFindByServiceCall{Call: _m.Mock.On("FindByService", table, service, from, to)}
}

type dataPointsFinderFindByServiceCall struct{ *mock.Call }

func (_c dataPointsFinderFindByServiceCall) TypedReturns(a metrics.DataPoints) *mock.Call {
	return _c.Return(a)
}

// backendMock mock of Backend.
type backendMock struct{ mock.Mock }

func newBackendMock(tb testing.TB) *backendMock {
	tb.Helper()

	m := &backendMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *backendMock) GetRules(_ context.Context) ([]Rule, error) {
	_ret := _m.Called()

	_ra0, _ := _ret.Get(0).([]Rule)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *backendMock) OnGetRules() *backendGetRulesCall {
	return &backendGetRulesCall{Call: _m.Mock.On("GetRules")}
}

func (_m *backendMock) OnGetRulesRaw() *backendGetRulesCall {
	return &backendGetRulesCall{Call: _m.Mock.On("GetRules")}
}

type backendGetRulesCall struct{ *mock.Call }

func (_c backendGetRulesCall) TypedReturns(a []Rule, b error) *mock.Call {
	return _c.Return(a, b)
}

func (_m *backendMock) PreflightAlerts(_ context.Context, alerts []Alert) ([]Alert, error) {
	_ret := _m.Called(alerts)

	_ra0, _ := _ret.Get(0).([]Alert)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *backendMock) OnPreflightAlerts(alerts []Alert) *backendPreflightAlertsCall {
	return &backendPreflightAlertsCall{Call: _m.Mock.On("PreflightAlerts", alerts)}
}

func (_m *backendMock) OnPreflightAlertsRaw(alerts interface{}) *backendPreflightAlertsCall {
	return &backendPreflightAlertsCall{Call: _m.Mock.On("PreflightAlerts", alerts)}
}

type backendPreflightAlertsCall struct{ *mock.Call }

func (_c backendPreflightAlertsCall) TypedReturns(a []Alert, b error) *mock.Call {
	return _c.Return(a, b)
}

func (_m *backendMock) SendAlerts(_ context.Context, alerts []Alert) error {
	_ret := _m.Called(alerts)

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *backendMock) OnSendAlerts(alerts []Alert) *backendSendAlertsCall {
	return &backendSendAlertsCall{Call: _m.Mock.On("SendAlerts", alerts)}
}

func (_m *backendMock) OnSendAlertsRaw(alerts interface{}) *backendSendAlertsCall {
	return &backendSendAlertsCall{Call: _m.Mock.On("SendAlerts", alerts)}
}

type backendSendAlertsCall struct{ *mock.Call }

func (_c backendSendAlertsCall) TypedReturns(a error) *mock.Call {
	return _c.Return(a)
}

// processorMock mock of Processor.
type processorMock struct{ mock.Mock }

func newProcessorMock(tb testing.TB) *processorMock {
	tb.Helper()

	m := &processorMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *processorMock) Process(rule *Rule) (*Alert, error) {
	_ret := _m.Called(rule)

	_ra0, _ := _ret.Get(0).(*Alert)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *processorMock) OnProcess(rule *Rule) *processorProcessCall {
	return &processorProcessCall{Call: _m.Mock.On("Process", rule)}
}

func (_m *processorMock) OnProcessRaw(rule interface{}) *processorProcessCall {
	return &processorProcessCall{Call: _m.Mock.On("Process", rule)}
}

type processorProcessCall struct{ *mock.Call }

func (_c processorProcessCall) TypedReturns(a *Alert, b error) *mock.Call {
	return _c.Return(a, b)
}
