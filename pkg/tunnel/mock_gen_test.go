// Code generated by mocktail; DO NOT EDIT.

package tunnel

import (
	"context"
	"testing"

	"github.com/stretchr/testify/mock"
)

// backendMock mock of Backend.
type backendMock struct{ mock.Mock }

func newBackendMock(tb testing.TB) *backendMock {
	tb.Helper()

	m := &backendMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *backendMock) ListClusterTunnelEndpoints(_ context.Context) ([]Endpoint, error) {
	_ret := _m.Called()

	_ra0, _ := _ret.Get(0).([]Endpoint)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *backendMock) OnListClusterTunnelEndpoints() *backendListClusterTunnelEndpointsCall {
	return &backendListClusterTunnelEndpointsCall{Call: _m.Mock.On("ListClusterTunnelEndpoints")}
}

func (_m *backendMock) OnListClusterTunnelEndpointsRaw() *backendListClusterTunnelEndpointsCall {
	return &backendListClusterTunnelEndpointsCall{Call: _m.Mock.On("ListClusterTunnelEndpoints")}
}

type backendListClusterTunnelEndpointsCall struct{ *mock.Call }

func (_c backendListClusterTunnelEndpointsCall) TypedReturns(a []Endpoint, b error) *mock.Call {
	return _c.Return(a, b)
}
